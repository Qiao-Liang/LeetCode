class Solution:
    def minimumMoves(self, grid) -> int:
        s = 0
        q = [(0, 0, 0, 1)]
        rt, ct = len(grid) - 1, len(grid[0]) - 1
        ct0 = ct - 1
        visited = set([(0, 0, 0, 1)])

        while q:
            t = []

            for r0, c0, r1, c1 in q:
                if r0 == r1 == rt and c0 == ct0 and c1 == ct:
                    return s

                nr, nc = (r1 << 1) - r0, (c1 << 1) - c0

                if -1 < nr <= rt and -1 < nc <= ct and grid[nr][nc] == 0 and (r1, c1, nr, nc) not in visited:
                    visited.add((r1, c1, nr, nc))
                    t.append((r1, c1, nr, nc))

                if r0 == r1:
                    nr = r0 + 1
                    can_go = nr <= rt and grid[nr][c0] == grid[nr][c1] == 0
                    dr, dc = 1, -1

                    if can_go and (nr, c0, nr, c1) not in visited:
                        visited.add((nr, c0, nr, c1))
                        t.append((nr, c0, nr, c1))
                elif c0 == c1:
                    nc = c0 + 1
                    can_go = nc <= ct and grid[r0][nc] == grid[r1][nc] == 0
                    dr, dc = -1, 1

                    if can_go and (r0, nc, r1, nc) not in visited:
                        visited.add((r0, nc, r1, nc))
                        t.append((r0, nc, r1, nc))

                nr, nc = r1 + dr, c1 + dc

                if can_go and -1 < nr <= rt and -1 < nc <= ct and grid[nr][nc] == 0 and (r0, c0, nr, nc) not in visited:
                    visited.add((r0, c0, nr, nc))
                    t.append((r0, c0, nr, nc))

            s += 1
            q = t

        return -1


sol = Solution()
# g = [
#     [0,0,0,0,0,1],
#     [1,1,0,0,1,0],
#     [0,0,0,0,1,1],
#     [0,0,1,0,1,0],
#     [0,1,1,0,0,0],
#     [0,1,1,0,0,0]]
# g = [
#     [0,0,1,1,1,1],
#     [0,0,0,0,1,1],
#     [1,1,0,0,0,1],
#     [1,1,1,0,0,1],
#     [1,1,1,0,0,1],
#     [1,1,1,0,0,0]]
# g = [
#     [0,0,0,0,1,1],
#     [1,1,0,0,0,1],
#     [1,1,1,0,0,1],
#     [1,1,1,0,1,1],
#     [1,1,1,0,0,1],
#     [1,1,1,0,0,0]
# ]
# g = [
#     [0,0,0,0,0,0,0,0,0,1],
#     [0,1,0,0,0,0,0,1,0,1],
#     [1,0,0,1,0,0,1,0,1,0],
#     [0,0,0,1,0,1,0,1,0,0],
#     [0,0,0,0,1,0,0,0,0,1],
#     [0,0,1,0,0,0,0,0,0,0],
#     [1,0,0,1,0,0,0,0,0,0],
#     [0,0,0,0,0,0,0,0,0,0],
#     [0,0,0,0,0,0,0,0,0,0],
#     [1,1,0,0,0,0,0,0,0,0]]
# g = [
#     [0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
#     [0,1,0,1,1,0,0,1,0,0,0,0,1,0,0],
#     [0,1,0,0,0,0,1,0,0,1,0,0,0,0,0],
#     [0,0,0,0,0,0,1,0,0,0,0,0,0,0,0],
#     [0,0,0,0,0,0,1,1,0,0,0,0,0,0,0],
#     [0,0,0,0,0,0,0,0,0,1,0,1,0,0,0],
#     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
#     [0,0,0,1,0,1,0,0,1,0,0,0,1,0,0],
#     [0,0,0,0,1,0,0,0,0,0,0,0,0,1,0],
#     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
#     [0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
#     [1,0,1,1,0,0,0,0,0,0,0,0,0,0,0],
#     [0,0,0,0,0,0,0,0,0,0,0,0,0,1,0],
#     [1,0,0,0,0,0,1,0,0,0,1,0,0,0,1],
#     [0,0,1,0,1,0,0,0,0,0,0,0,0,0,0]]
g = [
    [0,0,0,0,0,1],
    [1,1,0,0,1,0],
    [0,0,0,0,1,1],
    [0,0,1,0,1,0],
    [0,1,1,0,0,0],
    [0,1,1,0,0,0]]

print(sol.minimumMoves(g))
