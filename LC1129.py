from collections import defaultdict

class Solution(object):
    def shortestAlternatingPaths(self, n, red_edges, blue_edges):
        """
        :type n: int
        :type red_edges: List[List[int]]
        :type blue_edges: List[List[int]]
        :rtype: List[int]
        """
        gph = [[[], []] for _ in range(n)]
        res = [[n * 2] * 2 for _ in range(n)]
        res[0] = [0, 0]
        len_res = n << 1
        queue = [(0, 0), (0, 1)]

        for s, e in red_edges:
            gph[s][0].append(e)
        
        for s, e in blue_edges:
            gph[s][1].append(e)

        for si, c in queue:
            for ei in gph[si][c]:
                if res[ei][c] == len_res:
                    res[ei][c] = res[si][1 - c] + 1
                    queue.append((ei, (c + 1) % 2))

        return [x if x < len_res else -1 for x in map(min, res)]

    def shortestAlternatingPaths2(self, n, red_edges, blue_edges):
        """
        :type n: int
        :type red_edges: List[List[int]]
        :type blue_edges: List[List[int]]
        :rtype: List[int]
        """
        res = [-1] * n
        res[0] = 0
        red = defaultdict(set)
        blue = defaultdict(set)
        
        for s, t in red_edges:
            red[s].add(t)
            
        for s, t in blue_edges:
            blue[s].add(t)
            
        def recurse(s, color, steps):
            if color == 'r':
                next_color = 'b'
                nei = red
            else:
                next_color = 'r'
                nei = blue
            
            steps += 1
            
            for n in nei[s]:
                if res[n] == -1:
                    res[n] = steps
                else:
                    res[n] = min(res[n], steps)
                
                nei[s].remove(n)
                recurse(n, next_color, steps)
                nei[s].add(n)
                
        recurse(0, 'r', 0)
        recurse(0, 'b', 0)
        return res


sol = Solution()
# p = [3, [[0,1],[1,2]], []]
# p = [3, [[0,1]], [[1,2]]]
# p = [3, [[0,1],[0,2]], [[1,0]]]
# p = [5,[[0,1],[1,2],[2,3],[3,4]],[[1,2],[2,3],[3,1]]]
# p = [100,
# [[95,4],[95,38],[56,93],[98,81],[22,76],[14,94],[14,28],[24,46],[35,64],[77,77],[57,51],[65,85],[83,97],[33,9],[16,49],[6,42],[73,84],[53,23],[63,49],[98,70],[85,98],[29,3],[87,16],[94,11],[19,61],[21,2],[73,48],[0,7],[42,5],[80,37],[27,25],[45,39],[52,87],[70,43],[95,97],[0,81],[5,41],[31,93],[92,23],[31,75],[99,56],[30,77],[18,33],[45,17],[83,12],[89,49],[17,22],[8,28],[45,87],[34,68],[41,91],[42,13],[3,40],[30,23],[16,2],[52,58],[19,17],[58,69],[64,61],[32,89],[91,1],[41,77],[47,19],[18,84],[99,36],[9,57],[86,61],[5,74],[57,99],[93,88],[0,15],[94,1],[15,34],[9,86],[24,1],[90,72],[1,72],[95,81],[58,59],[94,2],[19,52],[11,33],[8,22],[2,28],[39,5],[67,18],[33,77],[94,5],[54,37],[29,62],[60,6],[27,35],[6,96],[15,5],[13,31],[90,0],[91,45],[85,30],[29,29],[58,22],[90,87],[58,24],[8,33],[23,82],[96,51],[43,56],[68,59]],
# [[81,24],[98,66],[15,66],[78,20],[14,4],[39,10],[81,68],[61,0],[99,84],[76,82],[27,69],[97,80],[7,38],[77,13],[61,42],[1,6],[96,18],[74,28],[31,39],[3,86],[44,98],[85,45],[89,42],[23,55],[1,2],[1,40],[51,84],[14,45],[31,40],[33,20],[65,79],[41,85],[31,32],[81,55],[50,10],[53,24],[87,4],[8,15],[18,28],[73,18],[83,14],[35,26],[34,42],[59,81],[6,36],[13,42],[16,26],[54,16],[23,57],[9,50],[34,46],[46,27],[2,80],[14,83],[81,21],[19,48],[56,19],[53,35],[92,48],[85,18],[33,6],[37,17],[93,61],[63,1],[51,59],[40,22],[25,87],[99,73],[70,92],[87,54],[6,39],[54,81],[60,60],[41,54],[5,0],[31,46],[10,30],[1,98],[79,79],[6,49],[31,33],[62,15],[7,42],[19,3],[53,2],[69,74],[99,18],[86,65],[55,20],[3,58],[8,49],[52,13],[99,53],[29,70],[81,85],[9,82],[30,7],[69,44],[34,90],[41,18],[95,69],[5,59],[26,64],[21,37],[45,23],[60,37],[84,9],[92,49],[69,7],[77,28],[27,38],[94,66],[68,1],[29,22],[65,45],[19,43],[55,9],[92,0],[33,33],[70,87],[10,3],[21,28],[25,35],[51,2],[74,14],[79,1],[92,39],[12,41],[84,34],[91,77],[51,9],[87,73],[50,66],[2,19]]]
p = [100,
[[23,30],[63,11],[92,53],[53,51],[74,47],[19,13],[25,67],[22,62],[15,57],[61,7],[84,11],[54,1],[1,67],[28,12],[93,3],[57,78],[43,17],[21,12],[48,30],[81,19],[76,11],[64,61],[37,3],[65,54],[81,73],[39,4],[29,64],[72,59],[37,49],[22,19],[52,66],[34,85],[62,29],[19,68],[43,74],[93,50],[91,22],[2,69],[6,9],[27,44],[19,41],[21,99],[18,96],[42,26],[88,38],[54,2],[31,60],[92,1],[12,49],[43,58],[31,37],[89,83],[15,42],[98,15],[96,26],[63,20],[54,47],[12,94],[10,7],[16,6],[14,17],[97,6],[6,28],[84,33],[17,83],[76,0],[29,14],[53,24],[61,41],[66,10],[2,37],[72,81],[85,47],[29,36],[94,24],[17,42],[53,80],[1,38],[56,49],[13,96],[64,9],[37,31],[45,31],[35,12],[91,80],[0,39],[38,41],[34,18],[36,8],[12,86],[9,83],[17,18],[31,16],[64,81],[17,17],[65,75],[32,93],[40,6],[8,28],[57,84],[24,87],[33,75],[86,38],[34,33],[79,40],[60,35],[99,79],[72,9]],
[[5,78],[33,51],[92,13],[32,15],[73,8],[40,41],[71,16],[86,47],[33,94],[57,44],[68,9],[89,52],[13,97],[40,15],[61,79],[51,2],[77,86],[66,24],[54,12],[42,92],[29,44],[11,55],[98,35],[63,59],[79,95],[33,90],[63,85],[78,10],[14,7],[8,36],[54,41],[95,74],[67,72],[83,87],[77,81],[66,43],[59,58],[34,19],[46,34],[24,3],[50,0],[47,83],[37,87],[92,92],[0,94],[25,2],[72,97],[79,24],[16,15],[31,33],[4,46],[65,63],[76,18],[64,89],[11,85],[68,62],[26,91],[47,75],[17,43],[70,22],[53,98],[55,39],[53,48],[45,51],[51,24],[79,50],[82,73],[27,26],[76,11],[1,50],[59,63],[42,78],[60,35],[47,51],[76,72],[96,35],[97,12],[87,6],[33,40],[15,35],[46,37],[57,59],[89,48],[3,27],[4,61],[34,40],[60,61],[32,43],[40,12],[60,23],[90,64],[81,75],[36,61],[47,73],[89,29],[34,78],[45,74],[75,13],[86,76],[13,93],[94,56],[93,91],[53,19],[95,6],[20,12],[2,45],[49,33],[20,78],[50,56],[79,14],[85,32],[65,45],[0,48],[81,82],[61,87],[50,15],[43,70],[86,38],[62,2],[89,97],[17,14],[52,2],[46,87],[0,16],[16,54],[86,5],[2,69],[80,77],[37,3],[89,59],[45,32],[47,17],[19,29],[69,81],[12,28],[52,73],[88,1],[10,92],[1,80],[21,57],[11,74],[19,25],[11,15],[25,29],[44,88],[86,13],[60,22],[97,55],[3,95],[73,51],[85,56],[58,97],[78,16],[42,84],[26,98],[46,10],[28,18],[14,12],[76,26],[79,12],[58,40],[72,89],[5,81],[41,65],[46,28],[18,25],[65,5],[0,85],[10,65],[28,56],[39,49],[22,17],[30,26],[53,6],[12,12],[16,16],[70,52],[96,55],[37,10],[72,15],[80,84],[50,60],[58,1],[76,74],[96,45],[42,77],[15,22],[99,19],[86,48],[98,11],[50,4],[71,44],[49,10],[4,31],[67,52],[52,94],[35,75],[83,63],[7,7],[99,38],[71,67],[18,84],[80,46],[80,15],[18,86],[10,75],[81,93],[67,31],[72,69],[18,24],[57,42],[93,8],[93,58]]]

print(sol.shortestAlternatingPaths(*p))
